{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweet","setNewTweet","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetList","ActionBtn","tweet","action","setLikes","userLike","setUserLike","actionDisplay","display","plural","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","message","send","loadTweets","alert","map","index","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetElm"],"mappings":"sMAAe,G,MAAA,IAA0B,kC,iCCIlC,SAASA,EAAgBC,GAC5B,IAAMC,EAAcC,IAAMC,YAC1B,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAAQ,sBAAKC,UAAWP,EAAMO,UAAtB,UACI,qBAAKA,UAAU,cAAf,SACI,uBAAMC,SAfD,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GAExBS,EAAcC,QAAQ,CAClBC,QAASL,EACTM,MAAO,EACPC,GAAI,KAERZ,EAAYQ,GACZb,EAAYW,QAAQC,MAAQ,IAIhB,UACI,0BAAUM,IAAKlB,EAAamB,UAAU,EAAMb,UAAU,eAAec,KAAK,UAC1E,wBAAQC,KAAK,SAASf,UAAU,uBAAhC,wBAGR,cAACgB,EAAD,CAAWlB,SAAUA,OAIrC,SAASmB,EAAUxB,GACf,IAAOyB,EAAiBzB,EAAjByB,MAAOC,EAAU1B,EAAV0B,OACd,EAA0BtB,mBAASqB,EAAMR,MAAQQ,EAAMR,MAAQ,GAA/D,mBAAOA,EAAP,KAAcU,EAAd,KACA,EAAgCvB,oBAAS,GAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KACMtB,EAAYP,EAAMO,UAAYA,EAAY,yBAC1CuB,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAClDC,EAASP,EAAMR,MAAQ,EAAI,IAAM,GAajCc,EAA0B,SAAhBL,EAAOJ,KAAkB,UAAGL,EAAH,YAAYa,GAAiBE,EAAUF,EAChF,OAAO,wBAAQvB,UAAWA,EAAW0B,QAbjB,SAACxB,GACjBA,EAAMC,iBACY,SAAdgB,EAAOJ,QACQ,IAAXM,GACAD,EAASV,EAAM,GACfY,GAAY,KAEZF,EAASV,EAAM,GACfY,GAAY,MAKjB,SAAqDE,IAG9D,SAASG,EAAMlC,GACb,IAAOyB,EAASzB,EAATyB,MACDlB,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OAAO,sBAAKA,UAAWA,EAAhB,UACL,8BAAIkB,EAAMP,GAAV,MAAiBO,EAAMT,WACvB,sBAAKT,UAAU,gBAAf,UACE,cAACiB,EAAD,CAAWC,MAAOA,EAAOC,OAAQ,CAACJ,KAAM,OAAQS,QAAQ,UACxD,cAACP,EAAD,CAAWC,MAAOA,EAAOC,OAAQ,CAACJ,KAAM,UAAWS,QAAQ,mBAK1D,SAASR,EAAUvB,GACxB,MAAoCI,mBAAS,IAA7C,mBAAO+B,EAAP,KAAmBC,EAAnB,KACA,EAA4BhC,mBAAS,IAArC,mBAAOiC,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,qBAAU,WACN,IAAMC,EAAQ,YAAIxC,EAAMK,UAAUoC,OAAON,GACrCK,EAAME,SAASL,EAAOK,QACtBJ,EAAUE,KAEf,CAACxC,EAAMK,SAAUgC,EAAQF,IAC5BI,qBAAU,YC3EP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,oCAIZH,EAAII,OAAS,WACXL,EAASC,EAAIK,SAAUL,EAAIM,SAE7BN,EAAIO,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZT,EAAS,CAACY,QAAQ,wBAAyB,MAE7CX,EAAIY,ODqEFC,EANmB,SAACR,EAAUC,GAC5BG,QAAQC,IAAIL,EAAUC,GACT,MAATA,EACFd,EAAca,GACTS,MAAM,yBAGd,IACI,8BACArB,EAAOsB,KAAI,SAAClC,EAAOmC,GAClB,OAAO,cAAC1B,EAAD,CAAOT,MAAOA,EAAmClB,UAAU,oBAA3D,UAA6BqD,EAA7B,qBE5DJC,MAtBf,WACE,OACE,qBAAKtD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKuD,IAAKC,EAAMxD,UAAU,WAAWyD,IAAI,SACzC,sCACO,8CADP,0BAGA,cAAEjE,EAAF,IACA,mBACEQ,UAAU,WACV0D,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCHOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFL,GAIJ,IAAMM,EAAWL,SAASC,eAAe,WACrCI,GACFH,IAASC,OACP,cAAClF,EAAD,IACAoF,GAOJf,M","file":"static/js/main.9fd9d924.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { loadTweets } from \"../lookup\";\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef();\r\n    const [newTweet, setNewTweet] = useState([]);\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newVal = textAreaRef.current.value;\r\n        let tempNewTweets = [...newTweet];\r\n        // chamge this to a sever side call\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 22\r\n        });\r\n        setNewTweet(tempNewTweets);\r\n        textAreaRef.current.value = '';\r\n    };\r\n    return  <div className={props.className}>\r\n                <div className='col-12 mb-3'>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n                        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n                    </form>\r\n                </div>\r\n                <TweetList newTweet={newTweet} />\r\n            </div>;\r\n}\r\n\r\nfunction ActionBtn(props) {\r\n    const {tweet, action} = props;\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    const [userLike, setUserLike] = useState(false);\r\n    const className = props.className ? className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action';\r\n    const plural = tweet.likes > 1 ? 's' : '';\r\n    const hamdleClick = (event) => {\r\n        event.preventDefault();\r\n        if (action.type==='like') {\r\n            if (userLike===true) {\r\n                setLikes(likes-1);\r\n                setUserLike(false);\r\n            } else {\r\n                setLikes(likes+1);\r\n                setUserLike(true);\r\n            }\r\n        }\r\n    };\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`+ plural  : actionDisplay;\r\n    return <button className={className} onClick={hamdleClick}>{display}</button>;\r\n  }\r\n  \r\n  function Tweet(props) {\r\n    const {tweet} = props;\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    return <div className={className} >\r\n      <p>{tweet.id} - {tweet.content}</p>\r\n      <div className='btn btn-group'>\r\n        <ActionBtn tweet={tweet} action={{type: 'like', display:'Like'}} />\r\n        <ActionBtn tweet={tweet} action={{type: 'retweet', display:'Retweet'}} />\r\n      </div>\r\n    </div>\r\n  }\r\n  \r\n  export function TweetList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    // setTweetsInit([...props.newTweet].concat(tweetsInit));\r\n    useEffect(()=>{\r\n        const final = [...props.newTweet].concat(tweetsInit);\r\n        if (final.length!==tweets.length) {\r\n            setTweets(final);\r\n        }\r\n    }, [props.newTweet, tweets, tweetsInit]);\r\n    useEffect(()=>{\r\n      // perform lookup\r\n      const myCallback = (response, status)=>{\r\n        console.log(response, status);\r\n        if (status===200) {\r\n          setTweetsInit(response);\r\n        } else alert('An error occured')\r\n      };\r\n      loadTweets(myCallback);\r\n    }, []);\r\n    return <div>\r\n          {tweets.map((tweet, index)=>{\r\n            return <Tweet tweet={tweet} key={`${index}-{tweet-id}`} className='my-5 mx-5 border' />\r\n          })}\r\n        </div>\r\n  }","\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest();\r\n    const method = 'GET';\r\n    const url = 'http://localhost:8000/api/tweet/';\r\n    const responseType = 'json';\r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function () {\r\n      callback(xhr.response, xhr.status);\r\n    };\r\n    xhr.onerror = function (e) {\r\n      console.log(e);\r\n      callback({message:'Request was an error'}, 400);\r\n    }\r\n    xhr.send();\r\n  }","import logo from './logo.svg';\nimport './App.css';\n\nimport { TweetsComponent } from \"./tweets\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        < TweetsComponent />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { TweetsComponent } from \"../src/tweets\";\n\nconst appEl = document.getElementById('root');\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst tweetElm = document.getElementById('tweetme');\nif (tweetElm) {\n  ReactDOM.render(\n    <TweetsComponent />,\n    tweetElm\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}